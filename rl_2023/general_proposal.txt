Разработка новых методов и алгоритмов построения оптимальных последовательностей оптимизационных проходов компилятора, основанных на обучении с подкреплением.

Идея:

Использовать обучение с подкреплением для выбора оптимальных последовательностей оптимизационных проходов компилятора.
Предлагается провести экспериментальные исследования со следующими пространствами шагов:

1) По шагам -- итеративно (возможны локальные оптимумы)
2) Эвристически выбираемые подпоследовательности из графа возможных последовательностей проходов

Пространство наград:
---


Выходом шага 1 будет пул программ и оптимальных последовательносей оптимизационных проходов. Это будет обучающей выборкой для шага 2.

Шаг 2:
Применить метод коллаборативной фильтрации для вывода.

Научная новизна:

1) В исследовательской работе предлагаются к разработке новые алгоритмы автоматизированной генерации оптимальных последовательностей оптимизационных проходов, реализующие как многошаговый выбор, так и подбор оптимальных параметров для отдельных параметрических проходов, таких как "раскрутка циклов", "векторизация циклов".

2) В исследовательской работе впервые сформулирован набор требований к ...

Также разработаны критерии новые критерии ... 

Предложены алгоритмы генерации ...

----------------------------------------------------------------------------------------
Требуется разработать многошаговый метод обучения с подкреплением, который должен:
1) на каждом шаге агента производить выбор подпоследовательности оптимизационных проходов без необходимости оценки эффективности от применения каждого прохода по отдельности.
2) использовать способ извлечения признаков, который учитывает информацию и о потоке управления, и потоке данных анализируемой программы.   
3) осуществлять мультикритериальный поиск оптимальных последовательностей, учитывающий такие цели применения проходов как:
  3.1) ускорение выполнения компилируемой программы на общих сценариях для специфической целевой аппаратуры (x86-64, AArch64, без и с учетом векторного сопроцессора)
  3.2) уменьшение размера объектного кода, и, как результат, бинарного файла
  3.3) поддержка отладки или её отсутствие
  3.4) иные цели (в том числе баланс между временем компиляции и ускорением)
4) осуществлять поиск оптимальных параметров для параметрических оптимизационных проходов для конкретных программ и целевой аппаратуры

----------------------------------------------------------------------------------------

Существующие подходы и инструменты решения задачи с использованием обучения с подкреплением, как правило, основаны на построении модели программы без учёта характеристик потока управления и потока данных, что не позволяет достаточно точно извлекать семантику исследуемых программ. В то же время, уже разработаны векторные и графовые методы характеризации программ для задач машинного обучения, учитывающие поток управления и данных, и экспериментально установлено, что ..(семантика программ учитывается достаточно точно). Следовательно, актуальным является вопрос адаптации, специализации и практической апробации вышеуказанных методов характеризации для построения пространства наблюдения поставленной задачи. Тестируемой гипотезой в данном исследовании является 

Следующим вопросом исследования является разработка методов выбора агентом применяемых оптимизаций, позволяющих ... Основным недостатком итеративного предсказания оптимизаций является риск сходимости к локальному минимуму даже при обеспечении идеальной стратегии выбора текущей оптимизации: (пример). 
Для решения данной задачи предлагается: 
а) разработать новые способы выбора подпоследовательностей оптимизаций из графа допустимых оптимизаций
б) пространство шагов агента ввести как множество возможных подпоследовательностей, извлекаемых из графа допустимых оптимизаций способами, указанными выше

Требуется разработать новый автоматизированный алгоритм и метод подбора оптимальных параметров для параметрических оптимизаций (таких как фактор раскрутки цикла, размер инструкции и размер данных при векторизации цикла и др), интегрированный в этап построения последовательности, который позволит осуществлять подстановку наиболее предпочтительных (по заданному критерию) параметров непосредственно на этапе построения последовательности, что, в свою очередь, теоретически должно улучшить выигрыш от применения последовательности, либо, по крайней мере, сократить её длину, если применение оптимизаций некоторого типа бесплолезно (по заданному критерию).Следует отметить, что существующие подходы и инструменты решения задачи не учитывают параметризацию, однако ведущие разработчики в этой области декларируют исследования и создание методов по такому учёту следующим важнейшим шагом в развитии существующих авто-настройки последовательностей оптимизаций при компиляции

Предлагается разработать и экспериментально сравнить 2 способа учёта параметризации:
1) На основе статической характеризации исследуемой программы -- с предобучением на наборе программ с заранее известными оптимальными параметрами оптимизаций
2) На основе динамической характеризации без предобучения


