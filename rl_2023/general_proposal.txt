Разработка новых методов и алгоритмов построения оптимальных последовательностей оптимизационных проходов компилятора, основанных на обучении с подкреплением.

Идея:

Использовать обучение с подкреплением для выбора оптимальных последовательностей оптимизационных проходов компилятора.
Предлагается провести экспериментальные исследования со следующими пространствами шагов:

1) По шагам -- итеративно (возможны локальные оптимумы)
2) Эвристически выбираемые подпоследовательности из графа возможных последовательностей проходов

Пространство наград:
---


Выходом шага 1 будет пул программ и оптимальных последовательносей оптимизационных проходов. Это будет обучающей выборкой для шага 2.

Шаг 2:
Применить метод коллаборативной фильтрации для вывода.

Научная новизна:

1) В исследовательской работе предлагаются к разработке новые алгоритмы автоматизированной генерации оптимальных последовательностей оптимизационных проходов, реализующие как многошаговый выбор, так и подбор оптимальных параметров для отдельных параметрических проходов, таких как "раскрутка циклов", "векторизация циклов".

2) В исследовательской работе впервые сформулирован набор требований к ...

Также разработаны критерии новые критерии ... 

Предложены алгоритмы генерации ...

----------------------------------------------------------------------------------------
Требуется разработать многошаговый метод обучения с подкреплением, который должен:
1) на каждом шаге агента производить выбор подпоследовательности оптимизационных проходов без необходимости оценки эффективности от применения каждого прохода по отдельности.
2) использовать способ извлечения признаков, который учитывает информацию и о потоке управления, и потоке данных анализируемой программы.   
3) осуществлять мультикритериальный поиск оптимальных последовательностей, учитывающий такие цели применения проходов как:
  3.1) ускорение выполнения компилируемой программы на общих сценариях для специфической целевой аппаратуры (x86-64, AArch64, без и с учетом векторного сопроцессора)
  3.2) уменьшение размера объектного кода, и, как результат, бинарного файла
  3.3) поддержка отладки или её отсутствие
  3.4) иные цели (в том числе баланс между временем компиляции и ускорением)
4) осуществлять поиск оптимальных параметров для параметрических оптимизационных проходов для конкретных программ и целевой аппаратуры 
